#!/usr/bin/env python
"""
修复landing_pages_image字段迁移冲突的脚本
"""

import os
import sys
import django

# 设置Django环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from django.db import connection
from django.db.migrations.recorder import MigrationRecorder

def fix_landing_pages_migration():
    """修复landing_pages_image字段的迁移冲突"""
    print("🔧 修复landing_pages_image字段迁移冲突...")
    
    recorder = MigrationRecorder(connection)
    
    # 检查数据库中是否已存在landing_pages_image字段
    field_exists = False
    with connection.cursor() as cursor:
        # 检查字段是否已存在（适配不同数据库）
        if connection.vendor == 'postgresql':
            # PostgreSQL查询
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'portfolioapp_mobilelandingpage' 
                AND column_name = 'landing_pages_image';
            """)
            field_exists = cursor.fetchone() is not None
        else:
            # SQLite查询
            cursor.execute("""
                PRAGMA table_info(portfolioapp_mobilelandingpage);
            """)
            columns = cursor.fetchall()
            field_exists = any(col[1] == 'landing_pages_image' for col in columns)
        
        print(f"  landing_pages_image字段存在: {field_exists}")
        
        # 如果字段已存在，我们需要确保相关的迁移被正确标记
        if field_exists:
            # 检查需要标记为已应用的迁移
            migrations_to_mark = [
                ('portfolioapp', '0012_mobilelandingpage_landing_pages_image'),
                ('portfolioapp', '0023_mobilelandingpage_tools_apps'),
            ]
            
            applied_migrations = recorder.applied_migrations()
            
            for migration in migrations_to_mark:
                if migration not in applied_migrations:
                    print(f"  标记迁移 {migration[1]} 为已应用")
                    recorder.record_applied(migration[0], migration[1])
                else:
                    print(f"  迁移 {migration[1]} 已经标记为已应用")
        
        # 确保有问题的迁移被标记为已应用
        problematic_migrations = [
            ('portfolioapp', '0012_remove_socialmediapost_mockup_image_1_and_more'),
        ]
        
        applied_migrations = recorder.applied_migrations()
        for migration in problematic_migrations:
            if migration in applied_migrations:
                print(f"  删除迁移记录 {migration[1]}")
                recorder.record_unapplied(migration[0], migration[1])
    
    print("✅ landing_pages_image字段迁移冲突修复完成")

def create_safe_migration():
    """创建安全的迁移文件"""
    print("\n🛠️  创建安全的迁移文件...")
    
    migration_content = '''# Generated by fix_landing_pages_migration.py

from django.db import migrations

class Migration(migrations.Migration):

    dependencies = [
        ('portfolioapp', '0024_socialmediapost_category'),
    ]

    operations = [
        # 这是一个安全的迁移，用于解决字段已存在的冲突
        # landing_pages_image字段已经存在于数据库中，无需再次创建
    ]
'''
    
    # 创建新的迁移文件
    migration_file = 'portfolioapp/migrations/0026_safe_landing_pages_fix.py'
    
    # 检查是否已存在
    if os.path.exists(migration_file):
        print(f"  迁移文件 {migration_file} 已存在")
        return
    
    with open(migration_file, 'w', encoding='utf-8') as f:
        f.write(migration_content)
    
    print(f"✅ 创建安全迁移: {migration_file}")

def main():
    """主函数"""
    print("🚀 开始修复landing_pages_image字段迁移冲突...")
    
    try:
        # 1. 修复迁移冲突
        fix_landing_pages_migration()
        
        # 2. 创建安全的迁移文件
        create_safe_migration()
        
        print("\n🎉 迁移冲突修复完成！")
        print("\n📋 下一步操作:")
        print("1. 运行: git add . && git commit -m 'Fix landing_pages_image migration conflict'")
        print("2. 推送到Heroku: git push heroku main")
        print("3. 运行: heroku run python manage.py migrate --app your-app-name")
        
    except Exception as e:
        print(f"\n❌ 修复过程中出现错误: {str(e)}")
        print("\n🔍 详细错误信息:")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()