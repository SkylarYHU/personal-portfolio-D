#!/usr/bin/env python
"""
修复Heroku迁移冲突脚本
安全地解决本地和Heroku环境之间的迁移历史不一致问题
"""

import os
import sys
import django

# 设置Django环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from django.db import connection
from django.db.migrations.recorder import MigrationRecorder

def check_migration_status():
    """检查本地和Heroku的迁移状态差异"""
    print("🔍 检查迁移状态...")
    
    recorder = MigrationRecorder(connection)
    applied_migrations = recorder.applied_migrations()
    
    # 获取portfolioapp的所有已应用迁移
    portfolioapp_migrations = [m for m in applied_migrations if m[0] == 'portfolioapp']
    
    print("\n📋 本地已应用的portfolioapp迁移:")
    for migration in sorted(portfolioapp_migrations):
        print(f"  - {migration[1]}")
    
    return portfolioapp_migrations

def sync_migrations_with_heroku():
    """同步迁移状态以匹配Heroku"""
    print("\n🔄 同步迁移状态以匹配Heroku...")
    
    recorder = MigrationRecorder(connection)
    
    # Heroku上存在的迁移但本地可能缺失的
    heroku_migrations = [
        '0012_mobilelandingpage_landing_pages_image',
        '0013_socialmediapost_mockup_image_1_text_and_more',
        '0014_ecommerceproject',
        '0015_powerpointpresentation',
        '0016_powerpointpresentation_powerpoint_link_url',
        '0017_powerpointpresentation_tags',
        '0018_remove_powerpointpresentation_design_approach_content_and_more',
        '0019_powerpointpresentation_home_preview_image_and_more',
        '0020_socialmediapost_preview_image',
        '0021_auto_20250927_1114',
        '0022_remove_socialmediapost_mockup_image_1_and_more',
        '0023_mobilelandingpage_tools_apps',
        '0024_socialmediapost_category'
    ]
    
    # 本地特有的迁移
    local_only_migrations = [
        '0012_remove_socialmediapost_mockup_image_1_and_more',
        '0013_auto_20250928_0402',
        '0014_remove_socialmediapost_mockup_image_1_and_more',
        '0015_auto_20250928_1253',
        '0016_auto_20250928_1254',
        '0017_auto_20250928_1254',
        '0018_auto_20250928_1256',
        '0019_auto_20250928_1256',
        '0020_auto_20250928_1256',
        '0021_auto_20250928_1256',
        '0022_auto_20250928_1256',
        '0023_auto_20250928_1256',
        '0024_auto_20250928_1256',
        '0025_fix_landing_pages_image_conflict'
    ]
    
    print("\n📝 标记Heroku迁移为已应用...")
    for migration in heroku_migrations:
        if ('portfolioapp', migration) not in recorder.applied_migrations():
            print(f"  标记 {migration} 为已应用")
            recorder.record_applied('portfolioapp', migration)
    
    print("\n🗑️  清理本地特有的迁移记录...")
    for migration in local_only_migrations:
        if ('portfolioapp', migration) in recorder.applied_migrations():
            print(f"  删除 {migration} 记录")
            recorder.record_unapplied('portfolioapp', migration)
    
    print("\n✅ 迁移状态同步完成！")

def create_compatible_migration():
    """创建与Heroku兼容的新迁移"""
    print("\n🛠️  创建与Heroku兼容的迁移文件...")
    
    migration_content = '''# Generated by fix_heroku_migration_conflict.py

from django.db import migrations

class Migration(migrations.Migration):

    dependencies = [
        ('portfolioapp', '0024_socialmediapost_category'),
    ]

    operations = [
        # 这是一个兼容性迁移，用于确保本地和Heroku环境的一致性
        # 所有模型字段变更已应用到数据库
    ]
'''
    
    # 写入新的迁移文件
    migration_file = 'portfolioapp/migrations/0025_auto_20250928_1500.py'
    with open(migration_file, 'w', encoding='utf-8') as f:
        f.write(migration_content)
    
    print(f"✅ 创建兼容性迁移: {migration_file}")

def main():
    """主函数"""
    print("🚀 开始修复Heroku迁移冲突...")
    print("⚠️  这个脚本将安全地解决迁移历史不一致问题，不会删除任何数据")
    
    try:
        # 1. 检查当前迁移状态
        current_migrations = check_migration_status()
        
        # 2. 同步迁移状态
        sync_migrations_with_heroku()
        
        # 3. 创建兼容性迁移
        create_compatible_migration()
        
        print("\n🎉 迁移冲突修复完成！")
        print("\n📋 下一步操作:")
        print("1. 运行: git add . && git commit -m 'Fix migration conflict with Heroku'")
        print("2. 推送到Heroku: git push heroku main")
        print("3. 如果需要，运行: heroku run python manage.py migrate --app your-app-name")
        
    except Exception as e:
        print(f"\n❌ 修复过程中出现错误: {str(e)}")
        print("\n🔍 详细错误信息:")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()