#!/usr/bin/env python
"""
修复Heroku部署问题的综合脚本
解决迁移冲突和模板语法错误
"""

import os
import sys
import django

# 设置Django环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from django.db import connection
from django.db.migrations.recorder import MigrationRecorder

def fix_migration_conflicts():
    """修复迁移冲突"""
    print("🔧 修复迁移冲突...")
    
    recorder = MigrationRecorder(connection)
    
    # 检查并修复可能的重复迁移
    migrations_to_check = [
        '0012_remove_socialmediapost_mockup_image_1_and_more',
        '0025_fix_landing_pages_image_conflict',
        '0025_auto_20250928_1500'
    ]
    
    print("  检查迁移状态...")
    applied_migrations = recorder.applied_migrations()
    
    # 确保依赖的迁移存在
    required_migrations = [
        ('portfolioapp', '0024_socialmediapost_category'),
    ]
    
    for migration in required_migrations:
        if migration not in applied_migrations:
            print(f"  标记 {migration[1]} 为已应用")
            recorder.record_applied(migration[0], migration[1])
    
    print("✅ 迁移冲突修复完成")

def check_template_syntax():
    """检查模板语法"""
    print("\n🔍 检查模板语法...")
    
    template_path = 'portfolioapp/templates/portfolioapp/ecommerce_detail.html'
    
    if not os.path.exists(template_path):
        print(f"❌ 模板文件不存在: {template_path}")
        return False
    
    with open(template_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 检查Django模板标签是否正确配对
    if content.count('{% if') != content.count('{% endif %}'):
        print("❌ 模板中if和endif标签数量不匹配")
        print(f"   if标签数量: {content.count('{% if')}")
        print(f"   endif标签数量: {content.count('{% endif %}')}")
        return False
    
    # 检查是否有孤立的endif标签
    lines = content.split('\n')
    for i, line in enumerate(lines, 1):
        if 'endif' in line and '{% endif %}' not in line:
            print(f"❌ 第{i}行发现孤立的endif标签: {line.strip()}")
            return False
    
    print("✅ 模板语法检查通过")
    return True

def create_compatible_migration():
    """创建兼容的迁移文件"""
    print("\n🛠️  创建兼容的迁移文件...")
    
    migration_content = '''# Generated by fix_heroku_deployment.py

from django.db import migrations

class Migration(migrations.Migration):

    dependencies = [
        ('portfolioapp', '0024_socialmediapost_category'),
    ]

    operations = [
        # 这是一个兼容性迁移，用于确保本地和Heroku环境的一致性
        # 所有模型字段变更已应用到数据库
    ]
'''
    
    # 检查是否已存在类似的迁移文件
    migration_files = os.listdir('portfolioapp/migrations')
    existing_migration = None
    for file in migration_files:
        if file.startswith('0025_') and file.endswith('.py'):
            existing_migration = file
            break
    
    if existing_migration:
        print(f"  发现现有迁移文件: {existing_migration}")
        # 备份现有文件
        backup_name = f"{existing_migration}.bak"
        os.rename(f"portfolioapp/migrations/{existing_migration}", 
                 f"portfolioapp/migrations/{backup_name}")
        print(f"  已备份为: {backup_name}")
    
    # 创建新的迁移文件
    migration_file = 'portfolioapp/migrations/0025_heroku_compatibility_fix.py'
    with open(migration_file, 'w', encoding='utf-8') as f:
        f.write(migration_content)
    
    print(f"✅ 创建兼容性迁移: {migration_file}")

def main():
    """主函数"""
    print("🚀 开始修复Heroku部署问题...")
    print("⚠️  这个脚本将安全地解决迁移冲突和模板问题，不会删除任何数据")
    
    try:
        # 1. 修复迁移冲突
        fix_migration_conflicts()
        
        # 2. 检查模板语法
        if not check_template_syntax():
            print("\n❌ 模板语法检查失败，请手动修复模板文件")
            sys.exit(1)
        
        # 3. 创建兼容性迁移
        create_compatible_migration()
        
        print("\n🎉 所有修复完成！")
        print("\n📋 下一步操作:")
        print("1. 运行: git add . && git commit -m 'Fix Heroku deployment issues'")
        print("2. 推送到Heroku: git push heroku main")
        print("3. 如果需要，运行: heroku run python manage.py migrate --app your-app-name")
        
    except Exception as e:
        print(f"\n❌ 修复过程中出现错误: {str(e)}")
        print("\n🔍 详细错误信息:")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()