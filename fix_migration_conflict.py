#!/usr/bin/env python
"""
迁移冲突修复脚本
安全地解决Heroku和本地环境之间的迁移冲突问题
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.db import connection

# 设置Django环境
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'portfolio.settings')
django.setup()

from django.db import migrations
from django.db.migrations.recorder import MigrationRecorder
from portfolioapp.models import MobileLandingPage

def check_database_structure():
    """检查数据库中的实际表结构"""
    print("🔍 检查数据库表结构...")
    
    with connection.cursor() as cursor:
        # 检查 mobilelandingpage 表的列 (适配SQLite)
        cursor.execute("PRAGMA table_info(portfolioapp_mobilelandingpage);")
        
        columns = cursor.fetchall()
        print("\n📋 MobileLandingPage 表的列:")
        for col in columns:
            # SQLite PRAGMA table_info 返回: (cid, name, type, notnull, dflt_value, pk)
            print(f"  - {col[1]} ({col[2]}) {'NOT NULL' if col[3] else 'NULL'}")
        
        # 检查是否存在 landing_pages_image 字段
        has_landing_pages_image = any(col[1] == 'landing_pages_image' for col in columns)
        print(f"\n✅ landing_pages_image 字段存在: {has_landing_pages_image}")
        
        return has_landing_pages_image, columns

def check_migration_status():
    """检查迁移状态"""
    print("\n🔍 检查迁移记录...")
    
    recorder = MigrationRecorder(connection)
    applied_migrations = recorder.applied_migrations()
    
    # 查找相关的迁移
    relevant_migrations = [
        migration for migration in applied_migrations 
        if migration[0] == 'portfolioapp' and '0012' in migration[1]
    ]
    
    print("\n📋 已应用的0012相关迁移:")
    for migration in relevant_migrations:
        print(f"  - {migration[1]}")
    
    return relevant_migrations

def create_safe_migration():
    """创建安全的迁移来解决冲突"""
    print("\n🛠️ 创建安全的修复迁移...")
    
    # 检查字段是否已存在
    has_field, columns = check_database_structure()
    
    if has_field:
        print("✅ landing_pages_image 字段已存在，无需添加")
        
        # 创建一个空的迁移来标记状态
        migration_content = '''
# Generated by fix_migration_conflict.py

from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ('portfolioapp', '0024_auto_20250928_1256'),
    ]
    
    operations = [
        # 这是一个修复迁移，用于解决字段已存在的冲突
        # landing_pages_image 字段已经存在于数据库中
    ]
'''
        
        # 写入新的迁移文件
        migration_file = 'portfolioapp/migrations/0025_fix_landing_pages_image_conflict.py'
        with open(migration_file, 'w', encoding='utf-8') as f:
            f.write(migration_content)
        
        print(f"✅ 创建修复迁移: {migration_file}")
        return migration_file
    
    else:
        print("❌ landing_pages_image 字段不存在，需要添加")
        return None

def mark_migration_as_applied(migration_name):
    """将迁移标记为已应用"""
    print(f"\n📝 标记迁移为已应用: {migration_name}")
    
    recorder = MigrationRecorder(connection)
    recorder.record_applied('portfolioapp', migration_name)
    
    print("✅ 迁移已标记为应用")

def main():
    """主函数"""
    print("🚀 开始修复迁移冲突...")
    print("⚠️  这个脚本将安全地解决迁移冲突，不会删除任何数据")
    
    try:
        # 1. 检查数据库结构
        has_field, columns = check_database_structure()
        
        # 2. 检查迁移状态
        applied_migrations = check_migration_status()
        
        # 3. 如果字段已存在但迁移记录不一致，创建修复迁移
        if has_field:
            # 检查是否需要创建修复迁移
            local_migration_exists = os.path.exists('portfolioapp/migrations/0012_remove_socialmediapost_mockup_image_1_and_more.py')
            
            if local_migration_exists:
                print("\n🔧 检测到本地迁移文件与Heroku不同步")
                print("创建修复迁移来解决冲突...")
                
                # 创建修复迁移
                fix_migration = create_safe_migration()
                
                if fix_migration:
                    print("\n✅ 修复迁移创建成功！")
                    print("\n📋 下一步操作:")
                    print("1. 运行: python manage.py migrate")
                    print("2. 提交更改: git add . && git commit -m 'Fix migration conflict'")
                    print("3. 推送到Heroku: git push skylarhu main")
                else:
                    print("❌ 无法创建修复迁移")
            else:
                print("\n✅ 本地迁移文件与Heroku同步，无需修复")
        else:
            print("\n❌ 数据库中缺少必要字段，需要手动修复")
        
        print("\n🎉 迁移冲突分析完成！")
        
    except Exception as e:
        print(f"\n❌ 修复过程中出现错误: {str(e)}")
        print("\n🔍 详细错误信息:")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()